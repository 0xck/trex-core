= TRex Python API Cookbook
==================================
:author: TRex team
:email: trex.tgen@gmail.com 
:revnumber: 1.00
:quotes.++:
:icons: font
:web_server_url: https://trex-tgn.cisco.com/trex
:local_web_server_url: csi-wiki-01:8181/trex
:github_stl_path: https://github.com/cisco-system-traffic-generator/trex-core/tree/master/scripts/stl
:github_stl_examples_path: https://github.com/cisco-system-traffic-generator/trex-core/tree/master/scripts/automation/trex_control_plane/stl/examples

:navigation:
:source-highlighter: coderay
:nofooter:

== TRex Python API Cookbook

This cookbook is intended to include short code snippets that can be easily
__copy-pasted__ and executed.

Each example will provide a single task and the simplest way to implement it
with TRex Python API
 

Through out the examples we will assume:

* TRex server is running locally on *127.0.0.1*
* TRex client object will be called *'c'*
* Default ports will be called *'port_0'* and *'port_1'*
* Setting 'verbose' level to VERBOSE_HIGH will produce the outputs*

//################################################## STL ##############################################

== Stateless Mode

In the following section we will provide recipies for common tasks
done in *TRex stateless mode*.

For more information about TRex stateless mode please refer to the manual.

all the examples should be executed from the directory *'automation/trex_control_plane/stl'*

=== Launching TRex Server

Execute TRex service by calling the following from the main package path or from 'scripts'
from a developer branch.

Provide *'--stl'* for stateless mode.


[source,python]
----

For stateless: 
./t-rex-64 -i --stl
----

*For a complete description of the command line paramters please refer to the manual*


=== Connecting To The Server
Connect to TRex server and then disconnect

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

# connect to the server
c = STLClient(server = '127.0.0.1')

try:
    c.connect()

except STLError as e:
    print(e)

finally:
    c.disconnect()
----

++++
<disqus></disqus>
++++


=== Acquring / Resetting Ports

Most of TRex commands required the ports to be in an owned state.

The basic way to accomplish this is to acquire the ports:


[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    c.acquire(ports = [port_0, port_1])    
    
except STLError as e:
    print(e)

finally:
    
    c.disconnect()
----


However, usually it is more easy to simply use the *reset* API
which will acquire, stop, and clear stats for the ports.

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    c.reset(ports = [port_0, port_1])    
    
except STLError as e:
    print(e)

finally:
    
    c.disconnect()
----


++++
<disqus></disqus>
++++


=== Moving Ports To Service Mode

Move to service mode and then exit service mode

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')

try:
    c.set_service_mode(ports = [port_0, port_1])
    c.set_service_mode(ports = [port_0, port_1], enabled = False)
    
except STLError as e:
    print(e)

finally:
    c.disconnect()
----

++++
<disqus></disqus>
++++


=== Configure Ports For L2 Mode

Configure both ports for L2 mode
(MAC-based configuration)

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    c.set_service_mode(ports = [port_0, port_1])

    c.set_l2_mode(port = tx_port, dst_mac = "6A:A7:B5:3A:4E:00")
    c.set_l2_mode(port = rx_port, dst_mac = "6A:A7:B5:3A:4E:01")
    
except STLError as e:
    print(e)

finally:
    c.set_service_mode(ports = [port_0, port_1], enabled = False)
    c.disconnect()
----
     
++++
<disqus></disqus>
++++



=== Configure Ports For L3 Mode

Configure both ports for L3 mode
(IP-based configuration)

Example assumes lookback configuration


[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    # move to service mode
    c.set_service_mode(ports = [port_0, port_1])

    c.set_l3_mode(port = port_0, src_ipv4 = '1.1.1.1', dst_ipv4 = '2.2.2.2')
    c.set_l3_mode(port = port_1, src_ipv4 = '2.2.2.2', dst_ipv4 = '1.1.1.1')

    # port_1 didn't have IP configuration when port_0 was ARP'ing for '2.2.2.2'
    # so explicitly call resolve (not needed when not in loopback)
    c.arp()
    
except STLError as e:
    print(e)

finally:
    c.set_service_mode(ports = [port_0, port_1], enabled = False)
    c.disconnect()
----
     
++++
<disqus></disqus>
++++

       


=== Configuring VLAN / QinQ

Configure VLAN / QinQ tagging

[NOTE]
====
Configuring VLAN does *not* affect the *traffic* generated by TRex.
TRex traffic is generated explicitly with or without VLAN according to the user provided data.

VLAN affects how TRex responds to ARP/Ping and how ARP/Ping requests are generated.
====

*Method 1 - Using dedicated API*:

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    # move to service mode
    c.set_service_mode(ports = port_0)

    # single VLAN
    c.set_vlan(ports = [port_0], vlan = 100)

    # Stacked VLANs (QinQ) outer:100, inner: 200
    c.set_vlan(ports = [port_0], vlan = [100, 200])

except STLError as e:
    print(e)

finally:
    c.set_service_mode(ports = port_0, enabled = False)
    c.disconnect()
----
     
     
*Method 2 - Using configuration API*:

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    # move to service mode
    c.set_service_mode(ports = port_0)

    # single VLAN
    c.set_l3_mode(port = port_0, src_ipv4 = '1.1.1.1', dst_ipv4 = '2.2.2.2', vlan = 100)

    # Stacked VLANs (QinQ) outer:100, inner: 200
    c.set_l3_mode(port = port_0, src_ipv4 = '1.1.1.1', dst_ipv4 = '2.2.2.2', vlan = [100, 200])

except STLError as e:
    print(e)

finally:
    c.set_service_mode(ports = port_0, enabled = False)
    c.disconnect()
----
     
++++
<disqus></disqus>
++++


=== Pinging

Ping from a TRex port an IPv4 address

[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    c.set_service_mode(ports = port_0)

    c.set_verbose('normal')
    c.ping_ip(src_port = 0, dst_ip = '4.4.4.4', pkt_size = 64, count = 5)
    
except STLError as e:
    print(e)

finally:
    c.set_verbose('low')
    c.set_service_mode(ports = port_0, enabled = False)
    c.disconnect()
----

*Output*:
[source,python]
----
Pinging 4.4.4.4 from port 0 with 64 bytes of data:
Reply from 4.4.4.4: bytes=64, time=0.24ms, TTL=128
Reply from 4.4.4.4: bytes=64, time=0.55ms, TTL=128
Reply from 4.4.4.4: bytes=64, time=0.71ms, TTL=128
Reply from 4.4.4.4: bytes=64, time=0.20ms, TTL=128
Reply from 4.4.4.4: bytes=64, time=0.99ms, TTL=128

----

++++
<disqus></disqus>
++++


=== ARP Resolving

TRex does not use dynamic ARP resolution.
Instead, the ports are expected to be resolved prior to
starting traffic injection.

Usually, when configuring L3 mode, the ports will be ARP resolved *automatically*.

However, when a link goes down the port is moved to unresolved state and it is
required to ARP resolve it explicitly.

Also, when the destination device has been replaced without the link going down (e.g. behind a switch)
you will need to ARP resolve the port explicitly.


[source,python]
----
# get TRex APIs
from trex_stl_lib.api import *

c = STLClient(server = '127.0.0.1')
c.connect()

try:
    c.set_service_mode(ports = [port_0, port_1])

    c.set_verbose('normal')
    c.arp(ports = [port_0, port_1])
    
except STLError as e:
    print(e)

finally:
    c.set_verbose('low')
    c.set_service_mode(ports = [port_0, port_1], enabled = False)
    c.disconnect()
----
     
     
*Output*:
[source,python]
----
Resolving destination on port(s) [0, 1]:                     [SUCCESS]

Port 0 - Recieved ARP reply from: 4.4.4.4, hw: 90:e2:ba:af:13:89
Port 1 - Recieved ARP reply from: 3.3.3.3, hw: 90:e2:ba:af:13:88

----

++++
<disqus></disqus>
++++


// ################################################## ASTF ##############################################


== Advanced Stateful

*TBD*

=== Launching The Server

Execute TRex service by calling the following from the main package path or from 'scripts'
from a developer branch.

Provide '--astf' for stateless.

[source,python]
----

For stateless: 
./t-rex-64 -i --astf
----
 